# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Challenge {
  id: ID!
  title: String!
  description: String!
  created_at: DateTime!
  updated_at: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ReturnChallenges {
  page: Float!
  results_per_page: Float!
  results_size: Float!
  total_results_size: Float!
  total_pages: Float!
  next_page: Float
  prev_page: Float
  results: [Challenge!]!
}

type Answer {
  id: ID!
  repository_link: String!
  status: AnswerStatus!
  grade: Float!
  created_at: DateTime!
  challenge: Challenge!
}

"""Available answer statuses"""
enum AnswerStatus {
  PENDING
  DONE
  ERROR
}

type ReturnAnswers {
  page: Float!
  results_per_page: Float!
  results_size: Float!
  total_results_size: Float!
  total_pages: Float!
  next_page: Float
  prev_page: Float
  results: [Answer!]!
}

type Query {
  challenges(skip: Int = 0, take: Int = 25, query: String): ReturnChallenges!
  answers(skip: Int = 0, take: Int = 25, challenge_title: String, start_date: DateTime, end_date: DateTime, status: AnswerStatus): ReturnAnswers!
}

type Mutation {
  createChallenge(createChallengeInput: CreateChallengeInput!): Challenge!
  updateChallenge(updateChallengeInput: UpdateChallengeInput!): Challenge!
  removeChallenge(id: String!): Challenge!
  createAnswer(createAnswerInput: CreateAnswerInput!): Answer!
}

input CreateChallengeInput {
  title: String!
  description: String!
}

input UpdateChallengeInput {
  title: String
  description: String
  id: String!
}

input CreateAnswerInput {
  repository_link: String!
  id_challenge: String!
}